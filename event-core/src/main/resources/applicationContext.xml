<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<mvc:annotation-driven />

	<context:component-scan base-package="org.insights.api">
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	</context:component-scan>

	<context:annotation-config />

	<bean id="gooruConstants"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="gooruConfigStyleBuild">${buildNumber}</prop>
				<prop key="insights.api.rest.endpoint">${insights.api.rest.endpoint}</prop>
				<prop key="message.file.path">${message.file.path}</prop>
				<prop key="locale.lang">${locale.lang}</prop>
				<prop key="locale.country">${locale.country}</prop>
			</props>
		</property>
	</bean>
	<bean id="filePath"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="insights.file.app.path">${insights.file.app.path}</prop>
				<prop key="insights.s3.bucket.path">${insights.s3.bucket.path}</prop>
				<prop key="insights.nfs.bucket.path">${insights.nfs.bucket.path}</prop>
				<prop key="insights.profile.url.path">${profile-url}</prop>
				<prop key="insights.file.real.path">${insights.file.real.path}</prop>
			</props>
		</property>
	</bean>
	<bean id="cassandra"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="cluster.name">${cluster.name}</prop>
				<prop key="cluster.hosts">${cluster.hosts}</prop>
				<prop key="log.keyspace">${log.keyspace}</prop>
				<prop key="log.datacentre">${log.datacentre}</prop>

			</props>
		</property>
	</bean>

	<!-- Redis configuration -->
	<!-- <bean id="redisLongTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.server.host}" />
		<property name="port" value="${redis.server.port}" />
	</bean>  -->

	<!-- Mailer configuration -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="${smtp.username}" />
		<property name="password" value="${smtp.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">false</prop>
			</props>
		</property>
	</bean>

	<!-- some pre-configured messages also which are ready to send -->
	<bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="to" value="${report.receiver.mail.id}"></property>
		<property name="from" value="${report.sender.mail.id}"></property>
		<property name="subject" value="FATAL - Application crash. Save your job !!" />
	</bean>

	<!-- default Mailer configuration -->
	<bean id="defaultMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="${smtp.username}" />
		<property name="password" value="${smtp.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">false</prop>
			</props>
		</property>
	</bean>
	<!-- kafka consumer thread -->

	<bean id="kafkaConsumerThreadPool" class="java.lang.Thread"
		init-method="start" destroy-method="interrupt">
		<constructor-arg ref="consumerThread" />
	</bean>

	<bean id="consumerThread" class="org.log.kafka.consumer.DataLoader"
		destroy-method="shutdownMessageConsumer" />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${configSettings}</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

</beans>
